name: Build Android APK
on: [push, pull_request]

jobs:
  build-android:
    name: Build APK
    runs-on: ubuntu-latest
    
    # Añadir esta sección para persistir el caché entre ejecuciones
    env:
      BUILDOZER_CACHE: true
      BUILDOZER_SKIP_UPDATE: true
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Restaurar caché de buildozer
      - name: Cache Buildozer
        uses: actions/cache@v3
        with:
          path: |
            .buildozer
            ~/.buildozer
          key: ${{ runner.os }}-buildozer-${{ hashFiles('buildozer.spec') }}
          restore-keys: |
            ${{ runner.os }}-buildozer-

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install buildozer==1.5.0
          pip install cython==0.29.33

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            python3-pip \
            build-essential \
            git \
            python3 \
            python3-dev \
            ffmpeg \
            libsdl2-dev \
            libsdl2-image-dev \
            libsdl2-mixer-dev \
            libsdl2-ttf-dev \
            libportmidi-dev \
            libswscale-dev \
            libavformat-dev \
            libavcodec-dev \
            zlib1g-dev \
            libgstreamer1.0 \
            gstreamer1.0-plugins-base \
            gstreamer1.0-plugins-good \
            openjdk-11-jdk \
            autoconf \
            automake \
            libtool \
            libffi-dev \
            libssl-dev \
            ccache \
            unzip \
            zip

      # Configurar buildozer.spec antes de la compilación
      - name: Configure buildozer.spec
        run: |
          if [ ! -f buildozer.spec ]; then
            buildozer init
          fi
          cat > buildozer.spec << 'EOF'
          [app]
          title = Mi Aplicación
          package.name = miapp
          package.domain = org.test
          source.dir = .
          source.include_exts = py,png,jpg,kv,atlas
          version = 0.1
          requirements = python3,kivy==2.1.0,kivymd==1.1.1
          orientation = portrait
          osx.python_version = 3
          osx.kivy_version = 2.1.0
          fullscreen = 0
          android.permissions = INTERNET
          android.api = 30
          android.minapi = 21
          android.sdk = 30
          android.ndk = 25.2.9519653
          android.skip_update = True
          android.accept_sdk_license = True
          android.arch = arm64-v8a
          p4a.bootstrap = sdl2
          p4a.branch = master
          p4a.local_recipes = ./recipes
          EOF
          cat buildozer.spec

      # Construir APK con opciones para no limpiar
      - name: Build APK
        run: |
          # Intentar continuar desde donde se quedó
          buildozer -v android debug || true
          
          # Si falló por AIDL, instalar manualmente las build-tools
          if [ ! -d ".buildozer/android/platform/android-sdk/build-tools" ]; then
            mkdir -p .buildozer/android/platform/android-sdk/build-tools
            cd .buildozer/android/platform/android-sdk/build-tools
            wget https://dl.google.com/android/repository/build-tools_r30.0.3-linux.zip
            unzip build-tools_r30.0.3-linux.zip
            mv android-11 30.0.3
            cd ../../../../../
          fi
          
          # Intentar construir de nuevo sin limpiar
          buildozer -v android debug
          
      # Listar archivos para depuración
      - name: List files
        run: |
          find . -name "*.apk" -type f
          ls -la .buildozer/android/platform/android-sdk/build-tools || echo "build-tools directory not found"
